/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Logging.ThriftContract
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TMsg : TBase
  {
    private List<TLogEntity> _logEntities;
    private List<TMetricEntity> _metricEntities;
    private long _IP;
    private int _AppId;

    public List<TLogEntity> LogEntities
    {
      get
      {
        return _logEntities;
      }
      set
      {
        __isset.logEntities = true;
        this._logEntities = value;
      }
    }

    public List<TMetricEntity> MetricEntities
    {
      get
      {
        return _metricEntities;
      }
      set
      {
        __isset.metricEntities = true;
        this._metricEntities = value;
      }
    }

    public long IP
    {
      get
      {
        return _IP;
      }
      set
      {
        __isset.IP = true;
        this._IP = value;
      }
    }

    public int AppId
    {
      get
      {
        return _AppId;
      }
      set
      {
        __isset.AppId = true;
        this._AppId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool logEntities;
      public bool metricEntities;
      public bool IP;
      public bool AppId;
    }

    public TMsg() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                LogEntities = new List<TLogEntity>();
                TList _list10 = iprot.ReadListBegin();
                for( int _i11 = 0; _i11 < _list10.Count; ++_i11)
                {
                  TLogEntity _elem12;
                  _elem12 = new TLogEntity();
                  _elem12.Read(iprot);
                  LogEntities.Add(_elem12);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                MetricEntities = new List<TMetricEntity>();
                TList _list13 = iprot.ReadListBegin();
                for( int _i14 = 0; _i14 < _list13.Count; ++_i14)
                {
                  TMetricEntity _elem15;
                  _elem15 = new TMetricEntity();
                  _elem15.Read(iprot);
                  MetricEntities.Add(_elem15);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              IP = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              AppId = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TMsg");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (LogEntities != null && __isset.logEntities) {
        field.Name = "logEntities";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, LogEntities.Count));
          foreach (TLogEntity _iter16 in LogEntities)
          {
            _iter16.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MetricEntities != null && __isset.metricEntities) {
        field.Name = "metricEntities";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, MetricEntities.Count));
          foreach (TMetricEntity _iter17 in MetricEntities)
          {
            _iter17.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.IP) {
        field.Name = "IP";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(IP);
        oprot.WriteFieldEnd();
      }
      if (__isset.AppId) {
        field.Name = "AppId";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(AppId);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("TMsg(");
      bool __first = true;
      if (LogEntities != null && __isset.logEntities) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LogEntities: ");
        __sb.Append(LogEntities);
      }
      if (MetricEntities != null && __isset.metricEntities) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MetricEntities: ");
        __sb.Append(MetricEntities);
      }
      if (__isset.IP) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IP: ");
        __sb.Append(IP);
      }
      if (__isset.AppId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppId: ");
        __sb.Append(AppId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
